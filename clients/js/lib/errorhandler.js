    var ErrorHandler = function(fn, context) {        this.__handler = this.__createErrorHandler(fn, context);        if (this.__WEBKIT_LT_534_16 || this.__MOZILLA) {            this.__useErrorToString();        } else {            this.__useWindowOnError();        }    };    ErrorHandler.prototype.__WEBKIT = navigator.userAgent.indexOf('WebKit') !== -1;    ErrorHandler.prototype.__MOZILLA = navigator.userAgent.match(/(Mozilla)(?:.*? rv:([\w.]+))?/);    ErrorHandler.prototype.__WEBKIT_LT_534_16 = +navigator.userAgent.replace(/.*AppleWebKit\/([0-9]+\.[0-9]+).*/, '$1') < 534.16;    ErrorHandler.prototype.__useWindowOnError = function() {        this.__previousErrorHandler = window.onerror;        window.onerror = this.__handler;    };    ErrorHandler.prototype.__useErrorToString = function() {        var self = this;        Error.prototype.toString = function() {            var error = self.__getParamsFromErrorObject(this);            if (error) {                self.__handler(error.message, error.url, error.line, error.trace);            }            return this.message;        };    };    ErrorHandler.prototype.__getParamsFromErrorObject = function(error) {        // Safari error object        if (error.message && error.sourceURL && typeof error.line !== 'undefined') {            return {                'message' : error.message,                'url' : error.sourceURL,                'line' : error.line            };        }        // Mozilla & Chrome v.9- error object        if (!error.stack) {            // skip this error            return null;        }        var line = error.stack.match(/[a-z]+:\/\/[^:]+:[^:]+/)[0].split(':');        return {            'message': error.message,            'url': line[0] + ':' + line[1],            'line': line[2],            'trace': error.stack        }    };    ErrorHandler.prototype.__createErrorHandler = function(fn, context) {        if (typeof fn !== 'function') {            return;        }        var self = this;        context = context || window;        return function(message, file, line) {            if (self.__previousErrorHandler) {                self.__previousErrorHandler.apply(context, arguments);            }            fn.apply(context, arguments);            // return true for webkit, and false otherwise            return self.__WEBKIT;        }    };