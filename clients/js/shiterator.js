(function() {
    Shiterator = function(callback, options) {        this.__callback = callback || noop;                this._options = merge({            host: null,            port: 6666,            postingPeriod: 1,          // in seconds            forgetErrorsAfter: 0,       // in days, 0 means "1 year"            errorToData: this.__convertErrorToData,            errorsLimit: 10,            ignoreErrors: true        }, options);        this.__ShiteratorInit();    };    Shiterator.prototype.__ShiteratorInit = function() {        this.__started = false;        this.__previousErrorHandler = window.onerror || null;        this.__errorsToPost = [];        this.__knownErrors = new ErrorStorage(this._options.forgetErrorsAfter || 365);        this.__errorsCount = 0;        this.__postErrorTimeout = null;        if (typeof this._options.errorToData === 'function') {            this.__convertErrorToData = this._options.errorToData;        }        this.__url = this.__getFullUrl();        this.__form = null;    };    Shiterator.prototype.__getFullUrl = function() {        if (this._options.host) {            return (this._options.host.indexOf('http://') !== 0 ? 'http://' : '') +                    this._options.host +                   (this._options.port ? ':' + this._options.port : '');        }        return null;    };    Shiterator.prototype.__convertErrorToData = function(message, file, line) {        return {            'type'      : 'JavaScript',            'subject'   : message + ' on ' + file + ':' + line,            'message'   : message,            'line'      : line,            'stack'     : 'not available',            'tracker'   : {},            'file'      : file,            'custom'    : {                'url'      : document.location.href,                'referer'  : document.referrer            }        };    };    Shiterator.prototype.__errorHandler = function(message, file, line) {        var id = foldString(message + ' on ' + file + ':' + line, 4);        var self = this;        var error = this.__convertErrorToData(message, file, line);        if (this.__errorsCount < this._options.errorsLimit && !this.__knownErrors.has(id)) {            this.__knownErrors.put(id);            this.__errorsToPost.push(error);            this.__errorsCount++;            this.__callback.call(window, error);            if (!this.__postErrorTimeout) {                this.__postErrorTimeout = setTimeout(function() {                    self.__submitErrors();                }, this._options.postingPeriod * 1000);            }        }        (self.__previousErrorHandler || noop)(message, file, line);        return this._options.ignoreErrors;    };    Shiterator.prototype.__submitErrors = function() {        if (!this.__url) {            return;        }        if (!this.__form) {            // create form & iframe            var box = document.createElement('div');            box.style.display = 'none';            box.innerHTML = '<form action="' + this.__url + '" method="post" target="shiterator-error-frame">' +                            "<input type='hidden' name='error' value=''>" +                            '</form>' +                            '<iframe id="shiterator-error-frame" name="shiterator-error-frame"></iframe>';            document.body.appendChild(box);            this.__form = box.getElementsByTagName('form')[0];        }        var iframe = box.getElementsByTagName('iframe')[0];        var input = box.getElementsByTagName('input')[0];        var JSONString = JSONToString(this.__errorsToPost);        input.setAttribute('value', JSONString);        iframe.onload = function() {            iframe.onload = null;            self.stop();        };        this.__form.submit();    };    Shiterator.prototype.start = function () {        if (!this.__started) {            var self = this;            window.onerror = function() {                return self.__errorHandler.apply(self, arguments);            };            this.__started = true;        }    };    Shiterator.prototype.stop = function () {        if (this.__started) {            window.onerror = this.__previousErrorHandler;            this.__errorsToPost.length = 0;            this.__errorsCount = 0;            this.__started = false;        }    };

    var ErrorStorage = function(expireAfterDays) {        if (this.constructor._Singleton) {            return this;        } else {            this.constructor._Singleton = this;        }        this.__storage;        this.__expires;        this.__retrieveFromCookies(expireAfterDays);    };    ErrorStorage.prototype.__retrieveFromCookies = function(expireAfterDays) {        this.__storage = [];        var storedData = this.__getCookie('shiterator');        if (storedData) {            this.__storage = storedData.split('/');        }        var expirationTimestamp = this.__storage.shift();        if (!expirationTimestamp) {            expirationTimestamp = new Date((new Date()).getTime() + expireAfterDays * 1000 * 60 * 60 * 24);        }        this.__expires = this.__expires = expirationTimestamp;    };        ErrorStorage.prototype.__setCookie = function(name, value, expires, path, domain, secure) {        var today = new Date();        today.setTime(today.getTime());        var expires_date = new Date(expires);        document.cookie = name + "=" + encodeURIComponent(value) +                          (expires ? ";expires=" + expires_date.toGMTString() : "") +                          (path ? ";path=" + path : "") +                          (domain ? ";domain=" + domain : "") +                          (secure ? ";secure" : "");    };    ErrorStorage.prototype.__getCookie = function(check_name) {        var allCookies = document.cookie.split(';');        var tempCookie = '';        var cookieName = '';        var cookieValue = '';        for (var i = 0, len = allCookies.length; i < len; ++i) {            tempCookie = allCookies[i].split('=');            cookieName = tempCookie[0].replace(/^\s+|\s+$/g, '');            if (cookieName === check_name) {                if (tempCookie.length > 1) {                    cookieValue = decodeURIComponent(tempCookie[1].replace(/^\s+|\s+$/g, ''));                }                return cookieValue;            }        }        return null;    };    ErrorStorage.prototype.__storeInCookies = function() {        var cookie = [this.__expires].concat(this.__storage).join('/');        this.__setCookie('shiterator', cookie, this.__expires);    };    ErrorStorage.prototype.has = function(key) {        return this.__storage.indexOf(key) !== -1;    };    ErrorStorage.prototype.put = function(key) {        this.__storage.push(key);        this.__storeInCookies();    };

    function f(n) {        // Format integers to have at least two digits.        return n < 10 ? '0' + n : n;    }    if (typeof Date.prototype.toJSON !== 'function') {        Date.prototype.toJSON = function (key) {            return isFinite(this.valueOf()) ?                this.getUTCFullYear()     + '-' +                f(this.getUTCMonth() + 1) + '-' +                f(this.getUTCDate())      + 'T' +                f(this.getUTCHours())     + ':' +                f(this.getUTCMinutes())   + ':' +                f(this.getUTCSeconds())   + 'Z' : null;        };        String.prototype.toJSON      =            Number.prototype.toJSON  =            Boolean.prototype.toJSON = function (key) {                return this.valueOf();            };    }    var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,        gap,        indent,        meta = {    // table of character substitutions            '\b': '\\b',            '\t': '\\t',            '\n': '\\n',            '\f': '\\f',            '\r': '\\r',            '"' : '\\"',            '\\': '\\\\'        },        rep;    function quote(string) {        escapable.lastIndex = 0;        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {            var c = meta[a];            return typeof c === 'string' ? c :                '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);        }) + '"' : '"' + string + '"';    }    function str(key, holder) {        var i,          // The loop counter.            k,          // The member key.            v,          // The member value.            length,            mind = gap,            partial,            value = holder[key];        if (value && typeof value === 'object' &&                typeof value.toJSON === 'function') {            value = value.toJSON(key);        }        if (typeof rep === 'function') {            value = rep.call(holder, key, value);        }        switch (typeof value) {        case 'string':            return quote(value);        case 'number':            return isFinite(value) ? String(value) : 'null';        case 'boolean':        case 'null':            return String(value);        case 'object':            if (!value) {                return 'null';            }            gap += indent;            partial = [];            if (Object.prototype.toString.apply(value) === '[object Array]') {                length = value.length;                for (i = 0; i < length; i += 1) {                    partial[i] = str(i, value) || 'null';                }                v = partial.length === 0 ? '[]' : gap ?                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :                    '[' + partial.join(',') + ']';                gap = mind;                return v;            }            if (rep && typeof rep === 'object') {                length = rep.length;                for (i = 0; i < length; i += 1) {                    if (typeof rep[i] === 'string') {                        k = rep[i];                        v = str(k, value);                        if (v) {                            partial.push(quote(k) + (gap ? ': ' : ':') + v);                        }                    }                }            } else {                for (k in value) {                    if (Object.prototype.hasOwnProperty.call(value, k)) {                        v = str(k, value);                        if (v) {                            partial.push(quote(k) + (gap ? ': ' : ':') + v);                        }                    }                }            }            v = partial.length === 0 ? '{}' : gap ?                '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :                '{' + partial.join(',') + '}';            gap = mind;            return v;        }    }    function JSONToString(value, replacer, space) {        if (JSON && JSON.stringify) {            return JSON.stringify(value, replacer, space);        }        var i;        gap = '';        indent = '';        if (typeof space === 'number') {            for (i = 0; i < space; i += 1) {                indent += ' ';            }        } else if (typeof space === 'string') {            indent = space;        }        rep = replacer;        if (replacer && typeof replacer !== 'function' &&                (typeof replacer !== 'object' ||                typeof replacer.length !== 'number')) {            throw new Error('JSON.stringify');        }        return str('', {'': value});    }

    // merge two objects (not a deep copy)    function merge(destination, source) {        for (var key in source) {            if (source.hasOwnProperty(key)) {                destination[key] = source[key];            }        }        return destination;    }    // empty function    function noop() {}    // simple string hash function    function foldString(str) {        var FOLD = 4;        var MODULE = 0xffffffff;        var strlen = str.length;        var sum = 0;        // add trailing zeros to make strlen divisible by FOLD        if (strlen % FOLD) {            str += '000'.substr(0, FOLD - strlen % FOLD);        }        // folding        for(var i = 0, len = strlen / FOLD; i < len; ++i) {            for(var j = 0; j < FOLD; ++j) {                sum += str.charCodeAt(i * FOLD + j) << (j * 8);            }        }        return Math.abs(sum) % MODULE;    }

})();

